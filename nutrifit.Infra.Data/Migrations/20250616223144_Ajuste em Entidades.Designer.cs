// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using nutrifit.Infra.Data.Context;

#nullable disable

namespace Nutrifit.Infra.Data.Migrations
{
    [DbContext(typeof(NutrifitContext))]
    [Migration("20250616223144_Ajuste em Entidades")]
    partial class AjusteemEntidades
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nutrifit.Domain.Entities.Alimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AlimentoIbgeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Calorias")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Carboidratos")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Gorduras")
                        .HasColumnType("numeric");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Proteinas")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AlimentoIbgeId");

                    b.ToTable("Alimento", (string)null);
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.AlimentoIbge", b =>
                {
                    b.Property<int>("NumeroDoAlimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumeroDoAlimento"));

                    b.Property<decimal?>("CalcioMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CarboidratoG")
                        .HasColumnType("numeric");

                    b.Property<string>("CategoriaDoAlimento")
                        .HasColumnType("text");

                    b.Property<decimal?>("CinzasG")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CobreMg")
                        .HasColumnType("numeric");

                    b.Property<string>("ColesterolMg")
                        .HasColumnType("text");

                    b.Property<string>("DescricaoDosAlimentos")
                        .HasColumnType("text");

                    b.Property<decimal?>("EnergiaKJ")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EnergiaKcal")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FerroMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FibraAlimentarG")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FosforoMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("LipideosG")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MagnesioMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ManganesMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("NiacinaMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PiridoxinaMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PotassioMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ProteinaG")
                        .HasColumnType("numeric");

                    b.Property<string>("RAEMcg")
                        .HasColumnType("text");

                    b.Property<string>("REMcg")
                        .HasColumnType("text");

                    b.Property<string>("RetinolMcg")
                        .HasColumnType("text");

                    b.Property<decimal?>("RiboflavinaMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SodioMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TiaminaMg")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Umidade")
                        .HasColumnType("numeric");

                    b.Property<string>("VitaminaCMg")
                        .HasColumnType("text");

                    b.Property<decimal?>("ZincoMg")
                        .HasColumnType("numeric");

                    b.HasKey("NumeroDoAlimento");

                    b.ToTable("AlimentoIbge", (string)null);
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.ComentarioPaciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataComentario")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("ComentarioPaciente");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Consulta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.EvolucaoPaciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Altura")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Peso")
                        .HasColumnType("numeric");

                    b.Property<string>("Sintomas")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("EvolucaoPaciente");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.ItemRefeicao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AlimentoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("numeric");

                    b.Property<long>("RefeicaoId")
                        .HasColumnType("bigint");

                    b.Property<int>("UnidadeMedida")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlimentoId");

                    b.HasIndex("RefeicaoId");

                    b.ToTable("ItemRefeicao");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Nutricionista", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CrefNutricionista")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Especialidades")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Nutricionista");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Paciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("NutricionistaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NutricionistaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.PlanoAlimentar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ObservacoesGerais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("PlanoAlimentar");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Refeicao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<TimeSpan>("Horario")
                        .HasColumnType("interval");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PlanoAlimentarId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlanoAlimentarId");

                    b.ToTable("Refeicao");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutenticacaoDoisFatoresHabilitada")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FotoPerfilUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Alimento", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.AlimentoIbge", "AlimentoIbge")
                        .WithMany()
                        .HasForeignKey("AlimentoIbgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlimentoIbge");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.ComentarioPaciente", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Comentarios")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Consulta", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.EvolucaoPaciente", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Evolucoes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.ItemRefeicao", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.Alimento", "Alimento")
                        .WithMany()
                        .HasForeignKey("AlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nutrifit.Domain.Entities.Refeicao", "Refeicao")
                        .WithMany("Itens")
                        .HasForeignKey("RefeicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimento");

                    b.Navigation("Refeicao");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Nutricionista", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Nutricionista")
                        .HasForeignKey("Nutrifit.Domain.Entities.Nutricionista", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.Nutricionista", "Nutricionista")
                        .WithMany("Pacientes")
                        .HasForeignKey("NutricionistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nutrifit.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Paciente")
                        .HasForeignKey("Nutrifit.Domain.Entities.Paciente", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutricionista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.PlanoAlimentar", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.Paciente", "Paciente")
                        .WithMany("PlanosAlimentares")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Refeicao", b =>
                {
                    b.HasOne("Nutrifit.Domain.Entities.PlanoAlimentar", "PlanoAlimentar")
                        .WithMany("Refeicoes")
                        .HasForeignKey("PlanoAlimentarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanoAlimentar");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Nutricionista", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Evolucoes");

                    b.Navigation("PlanosAlimentares");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.PlanoAlimentar", b =>
                {
                    b.Navigation("Refeicoes");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Refeicao", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("Nutrifit.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Nutricionista");

                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
